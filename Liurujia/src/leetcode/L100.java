package leetcode;

import lintcode.TreeNode;
/*
 * 给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
示例 2:

输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
示例 3:

输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false

思路：
	按照遍历顺序是跟左右的顺序遍历两个树，只要发现两个节点不一样（其中有一个为空，
	或者其中有一个值不相等，就直接返回false），最后如果都遍历完毕，就返回true
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class L100 {
	public boolean isSameTree(TreeNode p, TreeNode q) {
		if(p==null||q==null){
            if(p==q){
                return true;
            }else{
                return false;
            }
		}
        if(p!=null&&q!=null&&q.val!=p.val){
        	return false;
        }
        return isSameTree(p.left, q.left)&&isSameTree(p.right, q.right);
    }
}
